{"ast":null,"code":"import config from \"../config\";\nconst apiKey = config.apiKey;\n\n// ---------------------- UTILISATEURS ----------------------\n\nexport const sendUser = (email, password) => {\n  const uri = `${config.apiUrl}/register`;\n  const data = JSON.stringify({\n    email,\n    password\n  });\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"x-api-key\": apiKey\n    },\n    body: data\n  };\n  return fetch(uri, requestOptions).then(handleResponse);\n};\nexport const getme = token => {\n  const uri = `${config.apiUrl}/me`;\n  const requestOptions = {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n    }\n  };\n  return fetch(uri, requestOptions).then(response => {\n    if (!response.ok) {\n      throw new Error(\"Erreur\");\n    }\n    return response.json();\n  });\n};\nexport const updateuser = (token, id, email) => {\n  return fetch(`${config.apiUrl}/api/users/${id}`, {\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"x-api-key\": apiKey,\n      Authorization: `Bearer ${token}`\n    },\n    body: JSON.stringify({\n      email\n    })\n  }).then(handleResponse);\n};\nexport const logUser = async (email, password) => {\n  try {\n    const response = await fetch(`${config.apiUrl}/login`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"x-api-key\": apiKey\n      },\n      body: JSON.stringify({\n        email,\n        password\n      })\n    });\n    if (!response.ok) {\n      throw new Error(\"Incorrect email or password\");\n    }\n    const data = await response.json(); // ðŸ”§ corrected: `res` -> `response`\n    return data;\n  } catch (error) {\n    console.error(\"API logUser error:\", error);\n    throw error;\n  }\n};\nexport const getUsers = token => {\n  const requestOptions = {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"x-api-key\": apiKey,\n      Authorization: `Bearer ${token}`\n    }\n  };\n  return fetch(`${config.apiUrl}/api/users`, requestOptions).then(handleResponse);\n};\nexport const deleteUsers = (token, userId) => {\n  const requestOptions = {\n    method: \"DELETE\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"x-api-key\": apiKey,\n      Authorization: `Bearer ${token}`\n    }\n  };\n  return fetch(`${config.apiUrl}/api/users/${userId}`, requestOptions).then(handleResponse);\n};\n\n// ---------------------- ATTRACTIONS ----------------------\n\nexport const sendAttraction = (token, nom, description, type, status, duree, age_minimum, date_creation, image) => {\n  const uri = `${config.apiUrl}/api/attractions`;\n  const data = JSON.stringify({\n    nom,\n    description,\n    type,\n    status,\n    duree,\n    age_minimum,\n    date_creation,\n    image,\n    commentaires: []\n  });\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"x-api-key\": apiKey,\n      Authorization: `Bearer ${token}`\n    },\n    body: data\n  };\n  return fetch(uri, requestOptions).then(handleResponse);\n};\nexport const getAttraction = () => {\n  const requestOptions = {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"x-api-key\": apiKey\n    }\n  };\n  return fetch(`${config.apiUrl}/api/attractions`, requestOptions).then(handleResponse);\n};\nexport const deleteAttraction = (token, attractionId) => {\n  const requestOptions = {\n    method: \"DELETE\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"x-api-key\": apiKey,\n      Authorization: `Bearer ${token}`\n    }\n  };\n  return fetch(`${config.apiUrl}/api/attractions/${attractionId}`, requestOptions).then(handleResponse);\n};\nexport const updateAttraction = (token, attractionId, attractionData) => {\n  return fetch(`${config.apiUrl}/api/attractions/${attractionId}`, {\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"x-api-key\": apiKey,\n      Authorization: `Bearer ${token}`\n    },\n    body: JSON.stringify(attractionData)\n  }).then(handleResponse);\n};\nexport const sendCommentaire = (token, attractionId, commentaire) => {\n  return fetch(`${config.apiUrl}/api/attractions/${attractionId}/commentaires`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"x-api-key\": apiKey,\n      Authorization: `Bearer ${token}`\n    },\n    body: JSON.stringify({\n      commentaire\n    })\n  }).then(handleResponse);\n};\n\n// ---------------------- PARC INFOS ----------------------\n\nexport const getMyParc = () => {\n  return fetch(`${config.apiUrl}/api/parc`, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"x-api-key\": apiKey\n    }\n  }).then(handleResponse);\n};\nexport const updateMyParc = (token, nomparc, descriptionparc) => {\n  return fetch(`${config.apiUrl}/api/parc`, {\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"x-api-key\": apiKey,\n      Authorization: `Bearer ${token}`\n    },\n    body: JSON.stringify({\n      nom: nomparc,\n      description: descriptionparc\n    })\n  }).then(handleResponse);\n};\n\n// ---------------------- TARIFS ----------------------\n\nexport const getTarif = () => {\n  return fetch(`${config.apiUrl}/api/tarifs`, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"x-api-key\": apiKey\n    }\n  }).then(handleResponse);\n};\n\n// ---------------------- GESTION D'ERREURS ----------------------\n\nconst handleResponse = response => {\n  if (!response.ok) {\n    throw new Error(\"Erreur\");\n  }\n  return response.json();\n};","map":{"version":3,"names":["config","apiKey","sendUser","email","password","uri","apiUrl","data","JSON","stringify","requestOptions","method","headers","body","fetch","then","handleResponse","getme","token","Authorization","response","ok","Error","json","updateuser","id","logUser","error","console","getUsers","deleteUsers","userId","sendAttraction","nom","description","type","status","duree","age_minimum","date_creation","image","commentaires","getAttraction","deleteAttraction","attractionId","updateAttraction","attractionData","sendCommentaire","commentaire","getMyParc","updateMyParc","nomparc","descriptionparc","getTarif"],"sources":["/Users/marinebordenave/Documents/Cours/WebSecureDevelopment/frontend/src/services/api.js"],"sourcesContent":["import config from \"../config\";\n\nconst apiKey = config.apiKey;\n\n// ---------------------- UTILISATEURS ----------------------\n\nexport const sendUser = (email, password) => {\n  const uri = `${config.apiUrl}/register`;\n  const data = JSON.stringify({ email, password });\n\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"x-api-key\": apiKey,\n    },\n    body: data,\n  };\n\n  return fetch(uri, requestOptions).then(handleResponse);\n};\n\nexport const getme = (token) => {\n  const uri = `${config.apiUrl}/me`;\n  const requestOptions = {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`,\n    },\n  };\n\n  return fetch(uri, requestOptions).then((response) => {\n    if (!response.ok) {\n      throw new Error(\"Erreur\");\n    }\n    return response.json();\n  });\n};\n\nexport const updateuser = (token, id, email) => {\n  return fetch(`${config.apiUrl}/api/users/${id}`, {\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"x-api-key\": apiKey,\n      Authorization: `Bearer ${token}`,\n    },\n    body: JSON.stringify({ email }),\n  }).then(handleResponse);\n};\n\nexport const logUser = async (email, password) => {\n  try {\n    const response = await fetch(`${config.apiUrl}/login`, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\", \"x-api-key\": apiKey },\n      body: JSON.stringify({ email, password }),\n    });\n\n    if (!response.ok) {\n      throw new Error(\"Incorrect email or password\");\n    }\n\n    const data = await response.json(); // ðŸ”§ corrected: `res` -> `response`\n    return data;\n  } catch (error) {\n    console.error(\"API logUser error:\", error);\n    throw error;\n  }\n};\n\nexport const getUsers = (token) => {\n  const requestOptions = {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"x-api-key\": apiKey,\n      Authorization: `Bearer ${token}`,\n    },\n  };\n\n  return fetch(`${config.apiUrl}/api/users`, requestOptions).then(\n    handleResponse\n  );\n};\n\nexport const deleteUsers = (token, userId) => {\n  const requestOptions = {\n    method: \"DELETE\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"x-api-key\": apiKey,\n      Authorization: `Bearer ${token}`,\n    },\n  };\n\n  return fetch(`${config.apiUrl}/api/users/${userId}`, requestOptions).then(\n    handleResponse\n  );\n};\n\n// ---------------------- ATTRACTIONS ----------------------\n\nexport const sendAttraction = (\n  token,\n  nom,\n  description,\n  type,\n  status,\n  duree,\n  age_minimum,\n  date_creation,\n  image\n) => {\n  const uri = `${config.apiUrl}/api/attractions`;\n  const data = JSON.stringify({\n    nom,\n    description,\n    type,\n    status,\n    duree,\n    age_minimum,\n    date_creation,\n    image,\n    commentaires: [],\n  });\n\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"x-api-key\": apiKey,\n      Authorization: `Bearer ${token}`,\n    },\n    body: data,\n  };\n\n  return fetch(uri, requestOptions).then(handleResponse);\n};\n\nexport const getAttraction = () => {\n  const requestOptions = {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"x-api-key\": apiKey,\n    },\n  };\n\n  return fetch(`${config.apiUrl}/api/attractions`, requestOptions).then(\n    handleResponse\n  );\n};\n\nexport const deleteAttraction = (token, attractionId) => {\n  const requestOptions = {\n    method: \"DELETE\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"x-api-key\": apiKey,\n      Authorization: `Bearer ${token}`,\n    },\n  };\n\n  return fetch(\n    `${config.apiUrl}/api/attractions/${attractionId}`,\n    requestOptions\n  ).then(handleResponse);\n};\n\nexport const updateAttraction = (token, attractionId, attractionData) => {\n  return fetch(`${config.apiUrl}/api/attractions/${attractionId}`, {\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"x-api-key\": apiKey,\n      Authorization: `Bearer ${token}`,\n    },\n    body: JSON.stringify(attractionData),\n  }).then(handleResponse);\n};\n\nexport const sendCommentaire = (token, attractionId, commentaire) => {\n  return fetch(\n    `${config.apiUrl}/api/attractions/${attractionId}/commentaires`,\n    {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"x-api-key\": apiKey,\n        Authorization: `Bearer ${token}`,\n      },\n      body: JSON.stringify({ commentaire }),\n    }\n  ).then(handleResponse);\n};\n\n// ---------------------- PARC INFOS ----------------------\n\nexport const getMyParc = () => {\n  return fetch(`${config.apiUrl}/api/parc`, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"x-api-key\": apiKey,\n    },\n  }).then(handleResponse);\n};\n\nexport const updateMyParc = (token, nomparc, descriptionparc) => {\n  return fetch(`${config.apiUrl}/api/parc`, {\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"x-api-key\": apiKey,\n      Authorization: `Bearer ${token}`,\n    },\n    body: JSON.stringify({ nom: nomparc, description: descriptionparc }),\n  }).then(handleResponse);\n};\n\n// ---------------------- TARIFS ----------------------\n\nexport const getTarif = () => {\n  return fetch(`${config.apiUrl}/api/tarifs`, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"x-api-key\": apiKey,\n    },\n  }).then(handleResponse);\n};\n\n// ---------------------- GESTION D'ERREURS ----------------------\n\nconst handleResponse = (response) => {\n  if (!response.ok) {\n    throw new Error(\"Erreur\");\n  }\n  return response.json();\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}